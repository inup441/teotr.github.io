<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[teotr.github.io]]></title>
  <link href="http://teotr.github.io/atom.xml" rel="self"/>
  <link href="http://teotr.github.io/"/>
  <updated>2013-04-16T20:37:11+09:00</updated>
  <id>http://teotr.github.io/</id>
  <author>
    <name><![CDATA[teotr]]></name>
    <email><![CDATA[mail@teotr.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SELECT の都道府県を自動的に選択する]]></title>
    <link href="http://teotr.github.io/blog/2011/04/27/select-pref/"/>
    <updated>2011-04-27T10:04:00+09:00</updated>
    <id>http://teotr.github.io/blog/2011/04/27/select-pref</id>
    <content type="html"><![CDATA[<p>selectから大阪を選ぶのは、中途半端な位置にあるのでちょっとめんどくさい。
なので書いてみた。</p>

<div><script src='https://gist.github.com/5394731.js?file=select-pref.user.js'></script>
<noscript><pre><code>// ==UserScript==
// @name           select-pref
// @namespace      http://twitter.com/teotr
// @include        http://*
// @include        https://*
// ==/UserScript==
//
(function(){
  var d, option, options, select, selects, _i, _j, _len, _len2;
  d = document;
  selects = d.getElementsByTagName('select');
  l: for (_i = 0, _len = selects.length; _i &lt; _len; _i++) {
    select = selects[_i];
    if (select.hasChildNodes()) {
      options = select.getElementsByTagName('option');
      for (_j = 0, _len2 = options.length; _j &lt; _len2; _j++) {
        option = options[_j];
        if (/大阪/.test(option.innerHTML)) {
          option.selected = true;
          select.value = option.value;
          break l;
        }
      }
    }
  }
})();</code></pre></noscript></div>


<p>ちなみに元のコードはcoffeescriptで書いた。
ラベルをつけるとコンパイルできなかったのではずしてある。</p>

<div><script src='https://gist.github.com/5394731.js?file=select-pref.user.coffee'></script>
<noscript><pre><code>(-&gt;
  d = document
  selects = d.getElementsByTagName 'select'

  for select in selects
    if select.hasChildNodes()
      options = select.getElementsByTagName 'option'
        for option in options
          if /大阪/.test option.innerHTML
            option.selected = true
            select.value = option.value
            break
  return
)()</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vimfiler の exrename が便利]]></title>
    <link href="http://teotr.github.io/blog/2011/04/19/vimfiler/"/>
    <updated>2011-04-19T23:01:00+09:00</updated>
    <id>http://teotr.github.io/blog/2011/04/19/vimfiler</id>
    <content type="html"><![CDATA[<p><img src="http://teotr.github.io/images/2011-04-19-vimfiler.png"></p>

<p><a href="https://github.com/Shougo/vimfiler" title="Shougo/vimfiler - GitHub">vimfiler</a>  という vim をファイラーとして使うためのプラグインがあります。</p>

<p>昔 Windows ユーザーだった頃には「あふ」という2画面ファイラーを使っていたのですが、「拡張リネーム」という機能が便利でした。</p>

<p>リネームしたいファイルを選択(マーク)して<code>R</code>を押すと、選択した全ファイルに対して一括でリネームを行うことができるというものです。</p>

<p>例えば拡張子を変えたり、分類のための文字列を挿入するといったことが簡単に行えてとても便利でした。</p>

<p>vimfiler にもそんな機能あるのかなー、と同じような操作してみたら、より便利な機能がありました。</p>

<h3>ファイルを選択する</h3>

<p>まず、リネームするファイルを選択します。</p>

<p>個別にリネームしたいファイルにカーソルがあるときに<code>&lt;Space&gt;</code>を押すか、<code>V</code>で一気に複数行を選択してから<code>&lt;Space&gt;</code>するとマークされます。</p>

<p>ファイルマスク(<code>M</code>)してから全選択(<code>*</code>)という方法もあります。</p>

<h3>リネームする</h3>

<p>選択した状態で<code>R</code>で拡張リネームの画面が開きます。</p>

<p>この拡張リネームの画面は通常のvimの編集画面と何ら変わりありません。</p>

<p>ということは、正規表現を用いた置換(<code>s/foo/bar/</code>)も使えるし、矩形選択(<code>&lt;C-v&gt;</code>)も使えるということです。</p>

<p>私は正規表現が苦手なんですが、矩形選択があるおかげで割合さささとリネームできてありがたいです。</p>

<h3>リネームを反映させる</h3>

<p>編集が終われば通常のファイルの編集時と同じように<code>:w</code>で保存すると無事リネーム終了です。</p>

<p>私はシェルなんかでさくさくリネームできる人ではないので、直感的に利用できるこの拡張リネームはとても便利。</p>

<p><a href="https://github.com/Shougo/vimfiler" title="Shougo/vimfiler - GitHub">Shougo/vimfiler - GitHub</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tabular の使い方メモ]]></title>
    <link href="http://teotr.github.io/blog/2011/04/15/tabular/"/>
    <updated>2011-04-15T20:35:00+09:00</updated>
    <id>http://teotr.github.io/blog/2011/04/15/tabular</id>
    <content type="html"><![CDATA[<p>vimではプラグインを利用することによってコードの整形を簡単に行うことができます。</p>

<p>整形のためのプラグインはいくつかあると思いますが、私は tabular というプラグインを利用しています。</p>

<p>ただ、よく利用するわりには基本のコマンドしか使えてなかったので、この辺りで使い方をメモしておいてもっと柔軟に整形していこうという趣旨のエントリーです。</p>

<h2>例文</h2>

<pre><code>Some short phrase,some other phrase
A much longer phrase here,and another long phrase
</code></pre>

<h2>基本</h2>

<h3>:Tabularize /,</h3>

<p>スラッシュに続けて区切り文字(この場合は「,」)を指定すると、複数行を揃えてくれます。</p>

<pre><code>Some short phrase         , some other phrase
A much longer phrase here , and another long phrase
</code></pre>

<h2>オプションを指定する</h2>

<p>区切り文字を基準として、フィールドごとに右寄せ( r )、左寄せ( l )、中央寄せ( c )をすることができます。数字は、次のフィールドまでのスペースの数を指定します。</p>

<h3>:Tabularize /,/r0</h3>

<pre><code>        Some short phrase,      some other phrase
A much longer phrase here,and another long phrase
</code></pre>

<h3>:Tabularize /,/l0</h3>

<pre><code>Some short phrase        ,some other phrase
A much longer phrase here,and another long phrase
</code></pre>

<h3>:Tabularize /,/l0c1</h3>

<pre><code>Some short phrase        , some other phrase
A much longer phrase here, and another long phrase
</code></pre>

<h2>区切り文字の位置を調整する</h2>

<p><code>\zs</code>はヘルプによると</p>

<blockquote><p>\zs   どこにでもマッチして、マッチの開始地点を設定します。
このアトムの次の文字は、マッチした文字列の 1 文字目です。|/zero-width|</p></blockquote>

<p>とのことです。
よくわかってないのですが、実際にどうなるかを見るとわかりやすいと思います。</p>

<h3>:Tabularize /,\zs/l1</h3>

<pre><code>Some short phrase,          some other phrase
A much longer phrase here,  and another long phrase
</code></pre>

<p>(参考)</p>

<ul>
<li><a href="https://github.com/godlygeek/tabular" title="godlygeek/tabular - GitHub">godlygeek/tabular - GitHub</a></li>
<li><a href="http://vimcasts.org/episodes/aligning-text-with-tabular-vim/" title="Aligning text with Tabular.vim">Aligning text with Tabular.vim</a></li>
<li>:help tabular</li>
<li>:help \zs</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[お顔☆メーカーを vim スクリプトにしてみた]]></title>
    <link href="http://teotr.github.io/blog/2011/04/13/aamaker-vim/"/>
    <updated>2011-04-13T18:17:00+09:00</updated>
    <id>http://teotr.github.io/blog/2011/04/13/aamaker-vim</id>
    <content type="html"><![CDATA[<p><img src="http://teotr.github.io/images/2011-04-13-aamaker-vim.png"></p>

<p>amachang さんが作った<a href="http://amachang.sakura.ne.jp/misc/aamaker/" title="お顔☆メーカー - あなただけの顔文字作ります">お顔☆メーカー</a>を vim スクリプトにしてみた。</p>

<p>ステータスラインに表示するようにしてみたら、カーソルが動くたびに新しい顏がめまぐるしく生成されてかわいい。</p>

<div><script src='https://gist.github.com/5394986.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>(参考) <a href="http://vim-users.jp/2009/11/hack98/" title="Vim-users.jp - Hack #98: VimScriptで疑似乱数を生成する">Vim-users.jp - Hack #98: VimScriptで疑似乱数を生成する</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[私家版 はてなキーワードへのリンクを無効にする Greasemonkey スクリプト]]></title>
    <link href="http://teotr.github.io/blog/2011/04/11/disable-hatena-keyword/"/>
    <updated>2011-04-11T07:20:00+09:00</updated>
    <id>http://teotr.github.io/blog/2011/04/11/disable-hatena-keyword</id>
    <content type="html"><![CDATA[<p>Evernote にメモしたいページがあった場合、いったん Instapaper で表示させてから Evernote にポストしてたのだけど、はてなキーワードが不要だったのでリンクを除去する Greasemonkey スクリプトを書きました。</p>

<p><a href="http://hatenagreasemonkey.g.hatena.ne.jp/keyword/%E3%81%AF%E3%81%A6%E3%81%AA%E3%82%AD%E3%83%BC%E3%83%AF%E3%83%BC%E3%83%89%E3%83%AA%E3%83%B3%E3%82%AF%E7%84%A1%E5%8A%B9%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88" title="はてなキーワードリンク無効スクリプト - はてなグリースモンキー">こちら</a>ではてなの公式のものが公開されてるのですが、リンクが切れてるみたいです。。</p>

<p>さらっと調べてみたところ、元々のスクリプトは除去するaタグの class を判定に使っていたみたいなんだけど、Instapaper で表示させた時点で class の情報は付加されていないのでこの方法は使えない。</p>

<p>なので href の URL にはてなキーワードへのリンクが含まれていたら除去する、という風にしてみました。</p>

<p>Instapaper 以外のページでも使えるけど、はてなキーワードへのリンクが問答無用で除去されるのでちゅうい。</p>

<div><script src='https://gist.github.com/5395027.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ハローワークインターネットサービスをより便利に使える greasemokey スクリプト書いた]]></title>
    <link href="http://teotr.github.io/blog/2011/04/09/hellowork-greasemonkey/"/>
    <updated>2011-04-09T21:12:00+09:00</updated>
    <id>http://teotr.github.io/blog/2011/04/09/hellowork-greasemonkey</id>
    <content type="html"><![CDATA[<p><img src="http://teotr.github.io/images/2011-04-09-hellowork-greasemonkey.png"></p>

<p>自宅にいながらにして全国の求人を見ることができて、非常に便利なことで有名なハローワークインターネットサービスですが、より便利にしたくて Greasemonkey スクリプトを書いてみました。</p>

<p>機能ごとに分けたので、全部で3ファイルあるんですが、全て適用すると上の画像のような画面になります。</p>

<ul>
<li>hellowork_arrange.user.js

<ul>
<li>2カラム化による一覧性の向上</li>
</ul>
</li>
<li>hellowork_highlight.user.js

<ul>
<li>キーワードによるハイライト</li>
<li>検索したい語にリンクをはる</li>
</ul>
</li>
<li>hellowork_set_criteria.user.js

<ul>
<li>検索条件を予め入力</li>
</ul>
</li>
</ul>


<div><script src='https://gist.github.com/5395091.js?file=hellowork_arrange.user.js'></script>
<noscript><pre><code>// ==UserScript==
// @name           hellowork_highlight
// @namespace     http://twitter.com/teotr
// @include     https://www.hellowork.go.jp/servicef/B01050.do?*
// ==/UserScript==

(function(){
  const HIGHLIGHT = ['年齢', '仕事の内容', '必要な経験等', '必要な免許・資格'];
  const HREF    = ['事業所名', '所在地', '電話番号'];
  const KEYWORDS  = ['トライアル'];
  const COLORS    = {highlight: '#FFFFA6', keyword: '#BDF271'};
  const SEARCH    = 'http://www.google.co.jp/search?q=';

  var trs = document.getElementsByTagName(&quot;tbody&quot;)[0].getElementsByTagName(&quot;tr&quot;);
  var total = trs.length;

  for (var i=0;i&lt;total;i++) {
    var tr = trs[i];
    var th = trs[i].getElementsByTagName(&quot;th&quot;)[0];
    var td = trs[i].getElementsByTagName(&quot;td&quot;)[0];

    for (var j in HIGHLIGHT) {
      if (th.innerHTML.match(RegExp('^' + HIGHLIGHT[j] + '$', 'g')) != null) {
        td.style.backgroundColor = COLORS.highlight;
      } else if (th.innerHTML.match(RegExp('^' + HREF[j])) != null) {
        var text = td.getElementsByTagName(&quot;div&quot;)[0].innerHTML;
        if (text.match('^(〒[0-9]{3}-[0-9]{4}&lt;br&amp;mt;)(.*)$') != null) {
          var address = text.match('^(〒[0-9]{3}-[0-9]{4}&lt;br&amp;mt;)(.*)$');
          text = address[2];
        }
        var a = document.createElement(&quot;a&quot;);

        a.href = SEARCH + encodeURI(text);
        a.target = '_blank';
        a.textContent = text;
        tr.getElementsByTagName(&quot;div&quot;)[0].innerHTML = '';
        tr.getElementsByTagName(&quot;div&quot;)[0].appendChild(a);
      }
    }

    for (var k in KEYWORDS) {
      if (td.innerHTML.search(KEYWORDS[k]) != -1) {
        td.style.backgroundColor = COLORS.keyword;
      }
    }
  }
})();
</code></pre></noscript></div>




<div><script src='https://gist.github.com/5395091.js?file=hellowork_highlight.user.js'></script>
<noscript><pre><code>// ==UserScript==
// @name           hellowork_highlight
// @namespace     http://twitter.com/teotr
// @include     https://www.hellowork.go.jp/servicef/B01050.do?*
// ==/UserScript==

(function(){
  const HIGHLIGHT = ['年齢', '仕事の内容', '必要な経験等', '必要な免許・資格'];
  const HREF    = ['事業所名', '所在地', '電話番号'];
  const KEYWORDS  = ['トライアル'];
  const COLORS    = {highlight: '#FFFFA6', keyword: '#BDF271'};
  const SEARCH    = 'http://www.google.co.jp/search?q=';

  var trs = document.getElementsByTagName(&quot;tbody&quot;)[0].getElementsByTagName(&quot;tr&quot;);
  var total = trs.length;

  for (var i=0;i&lt;total;i++) {
    var tr = trs[i];
    var th = trs[i].getElementsByTagName(&quot;th&quot;)[0];
    var td = trs[i].getElementsByTagName(&quot;td&quot;)[0];

    for (var j in HIGHLIGHT) {
      if (th.innerHTML.match(RegExp('^' + HIGHLIGHT[j] + '$', 'g')) != null) {
        td.style.backgroundColor = COLORS.highlight;
      } else if (th.innerHTML.match(RegExp('^' + HREF[j])) != null) {
        var text = td.getElementsByTagName(&quot;div&quot;)[0].innerHTML;
        if (text.match('^(〒[0-9]{3}-[0-9]{4}&lt;br&amp;mt;)(.*)$') != null) {
          var address = text.match('^(〒[0-9]{3}-[0-9]{4}&lt;br&amp;mt;)(.*)$');
          text = address[2];
        }
        var a = document.createElement(&quot;a&quot;);

        a.href = SEARCH + encodeURI(text);
        a.target = '_blank';
        a.textContent = text;
        tr.getElementsByTagName(&quot;div&quot;)[0].innerHTML = '';
        tr.getElementsByTagName(&quot;div&quot;)[0].appendChild(a);
      }
    }

    for (var k in KEYWORDS) {
      if (td.innerHTML.search(KEYWORDS[k]) != -1) {
        td.style.backgroundColor = COLORS.keyword;
      }
    }
  }
})();
</code></pre></noscript></div>




<div><script src='https://gist.github.com/5395091.js?file=hellowork_set_criteria.user.js'></script>
<noscript><pre><code>// ==UserScript==
// @name           hellowork_set_criteria
// @namespace     http://twitter.com/teotr
// @include     https://www.hellowork.go.jp/servicef/*
// ==/UserScript==

(function(){
  const PAGE_URL = document.URL.replace('https://www.hellowork.go.jp/servicef/','');
  const URLS = {
    basic_criteria  : /^B01020\.do\?action=initDisp&amp;screenId=B01020|B01030$/,
        detail_criteria : /^B01020\.do$/,
  }
  const CRITERIA = {
    basic_criteria : {
      ID_kyushokuUmu1 : true,
            ID_kyushokuNumber1 : &quot;12345&quot;,
            ID_kyushokuNumber2 : &quot;1234567&quot;,
            ID_nenrei         : &quot;18&quot;,
            ID_todofuken1     : &quot;27&quot;,     // 大阪府
            ID_todofuken2     : &quot;30&quot;,     // 和歌山県
            // &quot;ID_kiboShokushu&quot; : &quot;A&quot;, // 専門的・技術的職業;
            // &quot;ID_kiboShokushu&quot; : &quot;E&quot;, // サービスの職業;
            // &quot;ID_shinchakuKyujin1&quot; : true, // 新着求人
    },
      detail_criteria : {
        ID_freeWord      : &quot;ＰＨＰ&quot;,
            ID_freeWordRuigigo1 : true,
            ID_kanyuHoken1    : true,
      },
  }

  for (var page in URLS) {
    if (PAGE_URL.match(URLS[page])) {
      for (var id in CRITERIA[page]) {
        var value = CRITERIA[page][id];
        if (value == true) {
          document.getElementById(id).checked = true;
        } else {
          document.getElementById(id).value = value;
        }
      }
    }
  }
})();
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[現在使用している QuickLook プラグイン]]></title>
    <link href="http://teotr.github.io/blog/2011/04/05/quicklook/"/>
    <updated>2011-04-05T22:37:00+09:00</updated>
    <id>http://teotr.github.io/blog/2011/04/05/quicklook</id>
    <content type="html"><![CDATA[<ul>
<li>flv.qlgenerator <a href="http://homepage.mac.com/xdd/software/flv/" title="flv Quick Look Plugin top">http://homepage.mac.com/xdd/software/flv/</a></li>
<li>JapaneseText.qlgenerator <a href="http://x.nest.jp/mac/080109_0217.htm" title="Life with Mac OS X @rNote - JapaneseText.qlgenerator">http://x.nest.jp/mac/080109_0217.htm</a></li>
<li>QLColorCode.qlgenerator <a href="http://code.google.com/p/qlcolorcode/" title="qlcolorcode - A Quick Look plugin for source code with syntax highlighting - Google Project Hosting">http://code.google.com/p/qlcolorcode/</a></li>
</ul>


<p><code>/Library/QuickLook</code>、または <code>~/Library/QuickLook</code> に置くと有効になる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Language Switcher でアプリケーションごとに使用言語を変更する]]></title>
    <link href="http://teotr.github.io/blog/2011/04/04/language-switcher/"/>
    <updated>2011-04-04T17:37:00+09:00</updated>
    <id>http://teotr.github.io/blog/2011/04/04/language-switcher</id>
    <content type="html"><![CDATA[<p><img src="http://teotr.github.io/images/2011-04-04language-switcher.png"></p>

<p><a href="http://www.tj-hd.co.uk/en-gb/languageswitcher/" title="TJ-HD Software - Language Switcher">Language Switcher</a> を使うと、アプリケーションごとに使いたい言語を選ぶことができる。</p>

<p>「OS の言語環境を英語にするとサクサク動く」ということで、英語環境で使っていて普段は特に不便は感じないのだけど、<a href="http://www.pixelmator.com/" title="Pixelmator">Pixelmator</a> を使うにあたってさすがに英語だとちょっともうよくわからないので、日本語で使うことにした。</p>

<p>via <a href="http://bamboostudio.tank.jp/archives/1608" title="Snow Leopard でアプリを個別に言語設定するには - Bamboo Studio ＊ バンブースタジオ | Blog™">Snow Leopard でアプリを個別に言語設定するには - Bamboo Studio ＊ バンブースタジオ | Blog™</a></p>
]]></content>
  </entry>
  
</feed>
